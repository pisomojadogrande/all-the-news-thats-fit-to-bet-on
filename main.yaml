Description: Daily poller for NYT data

Parameters:
    APIKey:
        Type: String
        Description: Developer API Key

    S3Bucket:
        Type: String
        Description: Name of S3 bucket

    RawDataPrefix:
        Type: String
        Description: Prefix under the S3 bucket for raw data
        Default: 'raw/'

    CleanedDataPrefix:
        Type: String
        Description: Prefix under the S3 bucket for cleaned data
        Default: 'json-clean/'

    DatabaseName:
        Type: String
        Description: Name for Glue database 
        Default: 'nyt-articles-db'

    TableName:
        Type: String
        Description: Name for Glue table
        Default: 'articles'

    AthenaOutputBucket:
        Type: String
        Description: 'S3 bucket into which Athena should write query results.  It might look like aws-athena-query-results-<accountId>-<region>'

Resources:

    ArticleSearchFunctionExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: "lambda.amazonaws.com"
                      Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
                - PolicyName: inline-policy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action: "s3:PutObject"
                            Resource: !Sub "arn:aws:s3:::${S3Bucket}/${RawDataPrefix}*"
    
    ArticleSearchFunction:
        Type: AWS::Lambda::Function
        Properties:
            Code: ./src/article-search
            Environment:
                Variables:
                    API_KEY: !Ref APIKey
                    S3_BUCKET: !Ref S3Bucket
                    RAW_DATA_PREFIX: !Ref RawDataPrefix
            Handler: "lambda_function.lambda_handler"
            MemorySize: 128
            Role: !GetAtt ArticleSearchFunctionExecutionRole.Arn
            Runtime: python3.8
            Timeout: 120

    ArticleSearchFunctionEventPermission:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !GetAtt ArticleSearchFunction.Arn
            Principal: "events.amazonaws.com"
            Action: "lambda:InvokeFunction"
            SourceArn: !GetAtt DailyScheduledEventRule.Arn

    DailyScheduledEventRule:
        Type: AWS::Events::Rule
        Properties:
            Description: Kicks off article-searcher once per day
            State: ENABLED
            ScheduleExpression: "cron(30 23 * * ? *)"
            Targets:
                - Arn: !GetAtt ArticleSearchFunction.Arn
                  Id: article-search-function

    DataCleanerFunctionExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: "lambda.amazonaws.com"
                      Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
                - PolicyName: inline-policy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action: "s3:GetObject"
                            Resource: !Sub "arn:aws:s3:::${S3Bucket}/${RawDataPrefix}*"
                          - Effect: Allow
                            Action: "s3:PutObject"
                            Resource: !Sub "arn:aws:s3:::${S3Bucket}/${CleanedDataPrefix}*"

    DataCleanerFunction:
        Type: AWS::Lambda::Function
        Properties:
            Code: ./src/data-cleaner
            Environment:
                Variables:
                    S3_BUCKET: !Ref S3Bucket
                    RAW_DATA_PREFIX: !Ref RawDataPrefix
                    CLEANED_DATA_PREFIX: !Ref CleanedDataPrefix
            Handler: "lambda_function.lambda_handler"
            MemorySize: 128
            Role: !GetAtt DataCleanerFunctionExecutionRole.Arn
            Runtime: python3.8
            Timeout: 60

    DataCleanerFunctionPermission:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !Ref DataCleanerFunction
            Action: 'lambda:InvokeFunction'
            Principal: 's3.amazonaws.com'
            SourceAccount: !Ref AWS::AccountId
            SourceArn: !Sub "arn:aws:s3:::${S3Bucket}"


    Database:
        Type: AWS::Glue::Database
        Properties:
            CatalogId: !Ref AWS::AccountId
            DatabaseInput:
                Name: !Ref DatabaseName
                Description: Database for nyt-articles table


    AthenaTableCustomResourceExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: "lambda.amazonaws.com"
                      Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
                - PolicyName: inline-policy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - "athena:StartQueryExecution"
                                - "athena:GetQueryExecution"
                                - "athena:GetQueryResults"
                            Resource: "*"   
                          - Effect: Allow
                            Action:
                                - "glue:GetDatabase"
                                - "glue:CreateTable"
                                - "glue:DeleteTable"
                                - "glue:GetTable"
                                - "glue:GetPartitions"
                            Resource: 
                                - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog"
                                - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${DatabaseName}"
                                - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${DatabaseName}/${TableName}"
                          - Effect: Allow
                            Action:
                                - "s3:GetBucketLocation"
                                - "s3:ListBucket"
                                - "s3:GetO*"
                            Resource:
                                - !Sub "arn:aws:s3:::${S3Bucket}"
                                - !Sub "arn:aws:s3:::${S3Bucket}/${CleanedDataPrefix}*"
                          - Effect: Allow
                            Action:
                                - "s3:GetBucketLocation"
                                - "s3:ListBucket"
                                - "s3:PutO*"
                            Resource:
                                - !Sub "arn:aws:s3:::${AthenaOutputBucket}"
                                - !Sub "arn:aws:s3:::${AthenaOutputBucket}/*"

    AthenaTableCustomResourceFunction:
        Type: AWS::Lambda::Function
        Properties:
            Code: ./src/table-custom-resource
            Environment:
                Variables:
                    CATALOG: !Ref AWS::AccountId
                    DATABASE_NAME: !Ref DatabaseName
                    TABLE_NAME: !Ref TableName
                    ATHENA_OUTPUT_BUCKET: !Ref AthenaOutputBucket
                    ATHENA_OUTPUT_PREFIX: !Sub "AthenaTableCustomResource-{AWS::StackName}/"
                    TABLE_DATA_LOCATION: !Sub "s3://${S3Bucket}/${CleanedDataPrefix}"
                    POLL_INTERVAL_SEC: 2
            Handler: "lambda_function.handler"
            MemorySize: 128
            Role: !GetAtt AthenaTableCustomResourceExecutionRole.Arn
            Runtime: python3.8
            Timeout: 120

    AthenaTableCustomResource:
        Type: AWS::CloudFormation::CustomResource
        Properties:
            ServiceToken: !GetAtt AthenaTableCustomResourceFunction.Arn

    SiteBucket:
        Type: AWS::S3::Bucket
        Properties:
            PublicAccessBlockConfiguration:
                BlockPublicAcls: TRUE
                BlockPublicPolicy: TRUE
                IgnorePublicAcls: TRUE
                RestrictPublicBuckets: TRUE

    SiteDistributionOriginAccessIdentity:
        Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
        Properties:
            CloudFrontOriginAccessIdentityConfig:
                Comment: CloudFrontIdentityForArticlesSite

    SiteBucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref SiteBucket
            PolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                          AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${SiteDistributionOriginAccessIdentity}
                      Action:
                          - "s3:GetObject"
                      Resource: !Sub ${SiteBucket.Arn}/*

    SiteDistribution:
        Type: AWS::CloudFront::Distribution
        Properties:
            DistributionConfig:
                Enabled: true
                Origins:
                    - DomainName: !GetAtt SiteBucket.DomainName
                      Id: static-s3
                      S3OriginConfig:
                          OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${SiteDistributionOriginAccessIdentity}
                DefaultRootObject: line.html
                DefaultCacheBehavior:
                    ViewerProtocolPolicy: redirect-to-https
                    ForwardedValues:
                        QueryString: false
                    TargetOriginId: static-s3
                PriceClass: PriceClass_100

    S3NotificationCustomResourceExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: "lambda.amazonaws.com"
                      Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
                - PolicyName: inline-policy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action: "s3:PutBucketNotification"
                            Resource: !Sub "arn:aws:s3:::${S3Bucket}"

    S3NotificationCustomResourceFunction:
        Type: AWS::Lambda::Function
        Properties:
            Handler: index.handler
            MemorySize: 128
            Role: !GetAtt S3NotificationCustomResourceExecutionRole.Arn
            Runtime: python3.8
            Timeout: 60
            Code:
                ZipFile: !Sub |
                    import json
                    import cfnresponse
                    import boto3
                    def handler(event, context):
                        s3_client = boto3.client('s3')
                        request_type = event['RequestType']
                        lambda_function_configurations = []
                        if request_type == 'Create' or request_type == 'Update':
                            lambda_function_configurations = [{
                                'LambdaFunctionArn': '${DataCleanerFunction.Arn}',
                                'Events': ['s3:ObjectCreated:*'],
                                'Filter': {
                                    'Key': {
                                        'FilterRules': [{
                                            'Name': 'prefix',
                                            'Value': '${RawDataPrefix}'
                                        }]
                                    }
                                }
                            }]
                        try:
                            print(f"Notification for ${S3Bucket}: {lambda_function_configurations}")
                            s3_client.put_bucket_notification_configuration(
                                Bucket='${S3Bucket}',
                                NotificationConfiguration={
                                    'TopicConfigurations': [],
                                    'QueueConfigurations': [],
                                    'LambdaFunctionConfigurations': lambda_function_configurations
                                }
                            )
                            cfn_status = cfnresponse.SUCCESS
                        except Exception as e:
                            print(f"S3 Error {e}")
                            cfn_status = cfnresponse.FAILED

                        cfnresponse.send(event, context, cfn_status, None, 'S3NotificationCustomResource')

    
    S3NotificationCustomResource:
        Type: AWS::CloudFormation::CustomResource
        Properties:
            ServiceToken: !GetAtt S3NotificationCustomResourceFunction.Arn


    SiteBucketCleanoutCustomResourceExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: "lambda.amazonaws.com"
                      Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
                - PolicyName: inline-policy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - "s3:ListBucket"
                                - "s3:DeleteObject"
                            Resource:
                                - !Sub "arn:aws:s3:::${SiteBucket}"
                                - !Sub "arn:aws:s3:::${SiteBucket}/*"

    SiteBucketCleanoutCustomResourceFunction:
        Type: AWS::Lambda::Function
        Properties:
            Handler: index.handler
            MemorySize: 128
            Role: !GetAtt SiteBucketCleanoutCustomResourceExecutionRole.Arn
            Runtime: python3.8
            Timeout: 60
            Code:
                ZipFile: !Sub |
                    import json
                    import cfnresponse
                    import boto3
                    BUCKET = '${SiteBucket}'
                    def handler(event, context):
                        request_type = event['RequestType']
                        s3_client = boto3.client('s3')
                        cfn_status = cfnresponse.SUCCESS
                        if request_type == 'Delete':
                            try:
                                response = s3_client.list_objects_v2(
                                    Bucket=BUCKET
                                )
                                if 'Contents' in response:
                                    print(f"{BUCKET} has {len(response['Contents'])} items")
                                    for list_item in response['Contents']:
                                        key = list_item['Key']
                                        print(f"Deleting {BUCKET}/{key}")
                                        s3_client.delete_object(
                                            Bucket=BUCKET,
                                            Key=key
                                        )
                            except Exception as e:
                                print(f"S3 Error {e}")
                                cfn_status = cfnresponse.FAILED
                                    
                        cfnresponse.send(event, context, cfn_status, None, 'SiteBucketCleanoutCustomResource')

    SiteBucketCleanoutCustomResource:
        Type: AWS::CloudFormation::CustomResource
        Properties:
            ServiceToken: !GetAtt SiteBucketCleanoutCustomResourceFunction.Arn

Outputs:
    SiteUrl:
        Description: URL to CloudFormation for Site uRL
        Value: !Sub https://${SiteDistribution.DomainName}/
