Description: Daily poller for NYT data

Parameters:
    APIKey:
        Type: String
        Description: Developer API Key

    S3Bucket:
        Type: String
        Description: Name of S3 bucket

    RawDataPrefix:
        Type: String
        Description: Prefix under the S3 bucket for raw data
        Default: 'raw/'

    CleanedDataPrefix:
        Type: String
        Description: Prefix under the S3 bucket for cleaned data
        Default: 'json-clean/'


Resources:

    ArticleSearchFunctionExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: "lambda.amazonaws.com"
                      Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
                - PolicyName: inline-policy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action: "s3:PutObject"
                            Resource: !Sub "arn:aws:s3:::${S3Bucket}/${RawDataPrefix}*"
    
    ArticleSearchFunction:
        Type: AWS::Lambda::Function
        Properties:
            Code: ./src/article-search
            Environment:
                Variables:
                    API_KEY: !Ref APIKey
                    S3_BUCKET: !Ref S3Bucket
                    RAW_DATA_PREFIX: !Ref RawDataPrefix
            Handler: "lambda_function.lambda_handler"
            MemorySize: 128
            Role: !GetAtt ArticleSearchFunctionExecutionRole.Arn
            Runtime: python3.8
            Timeout: 120

    ArticleSearchFunctionEventPermission:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !GetAtt ArticleSearchFunction.Arn
            Principal: "events.amazonaws.com"
            Action: "lambda:InvokeFunction"
            SourceArn: !GetAtt DailyScheduledEventRule.Arn

    DailyScheduledEventRule:
        Type: AWS::Events::Rule
        Properties:
            Description: Kicks off article-searcher once per day
            State: ENABLED
            ScheduleExpression: "cron(30 23 * * ? *)"
            Targets:
                - Arn: !GetAtt ArticleSearchFunction.Arn
                  Id: article-search-function

    DataCleanerFunctionExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: "lambda.amazonaws.com"
                      Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
                - PolicyName: inline-policy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action: "s3:GetObject"
                            Resource: !Sub "arn:aws:s3:::${S3Bucket}/${RawDataPrefix}*"
                          - Effect: Allow
                            Action: "s3:PutObject"
                            Resource: !Sub "arn:aws:s3:::${S3Bucket}/${CleanedDataPrefix}*"

    DataCleanerFunction:
        Type: AWS::Lambda::Function
        Properties:
            Code: ./src/data-cleaner
            Environment:
                Variables:
                    S3_BUCKET: !Ref S3Bucket
                    RAW_DATA_PREFIX: !Ref RawDataPrefix
                    CLEANED_DATA_PREFIX: !Ref CleanedDataPrefix
            Handler: "lambda_function.lambda_handler"
            MemorySize: 128
            Role: !GetAtt DataCleanerFunctionExecutionRole.Arn
            Runtime: python3.8
            Timeout: 60

    DataCleanerFunctionPermission:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !Ref DataCleanerFunction
            Action: 'lambda:InvokeFunction'
            Principal: 's3.amazonaws.com'
            SourceAccount: !Ref AWS::AccountId
            SourceArn: !Sub "arn:aws:s3:::${S3Bucket}"


    Database:
        Type: AWS::Glue::Database
        Properties:
            CatalogId: !Ref AWS::AccountId
            DatabaseInput:
                Name: nyt-articles-db
                Description: Database for nyt-articles table

    CreateTableQuery:
        Type: AWS::Athena::NamedQuery
        Properties:
            Database: !Ref Database
            QueryString: !Sub CREATE EXTERNAL TABLE nyt_articles (pub_date string, headline string, top_keyword_type string, top_keyword_value string, trump_person_keyword_rank int, section_name string, subsection_name string, type_of_material string, document_type string, web_url string) ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe' LOCATION "s3://${S3Bucket}/${CleanedDataPrefix}" 

    S3NotificationCustomResourceExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: "lambda.amazonaws.com"
                      Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
                - PolicyName: inline-policy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action: "s3:PutBucketNotification"
                            Resource: !Sub "arn:aws:s3:::${S3Bucket}"

    S3NotificationCustomResourceFunction:
        Type: AWS::Lambda::Function
        Properties:
            Handler: index.handler
            MemorySize: 128
            Role: !GetAtt S3NotificationCustomResourceExecutionRole.Arn
            Runtime: python3.8
            Timeout: 60
            Code:
                ZipFile: !Sub |
                    import json
                    import cfnresponse
                    import boto3
                    def handler(event, context):
                        s3_client = boto3.client('s3')
                        request_type = event['RequestType']
                        lambda_function_configurations = []
                        if request_type == 'Create' or request_type == 'Update':
                            lambda_function_configurations = [{
                                'LambdaFunctionArn': '${DataCleanerFunction.Arn}',
                                'Events': ['s3:ObjectCreated:*'],
                                'Filter': {
                                    'Key': {
                                        'FilterRules': [{
                                            'Name': 'prefix',
                                            'Value': '${RawDataPrefix}'
                                        }]
                                    }
                                }
                            }]
                        try:
                            print(f"Notification for ${S3Bucket}: {lambda_function_configurations}")
                            s3_client.put_bucket_notification_configuration(
                                Bucket='${S3Bucket}',
                                NotificationConfiguration={
                                    'TopicConfigurations': [],
                                    'QueueConfigurations': [],
                                    'LambdaFunctionConfigurations': lambda_function_configurations
                                }
                            )
                            cfn_status = cfnresponse.SUCCESS
                        except Exception as e:
                            print(f"S3 Error {e}")
                            cfn_status = cfnresponse.FAILED

                        cfnresponse.send(event, context, cfn_status, None, 'S3NotificationCustomResource')

    
    S3NotificationCustomResource:
        Type: AWS::CloudFormation::CustomResource
        Properties:
            ServiceToken: !GetAtt S3NotificationCustomResourceFunction.Arn



